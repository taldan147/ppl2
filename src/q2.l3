(define append 
  (lambda(lst1 lst2)
      (if (empty? lst1)
        lst2
        (cons (car lst1)(append (cdr lst1) lst2)))
  )
)

(define empty?
  (lambda (lst1)
    (eq? lst1 '())
  )
)

(define reverse 
  (lambda (lst)
    (if (empty? lst)
      lst
      (append (reverse (cdr lst)) (cons (car lst) (list)))
    )
  )
)

(define duplicate-helper
    (lambda(num ocurr)
      (if (eq? ocurr 0)
        '()
        (cons num (duplicate-helper num (- ocurr 1)))
      )
    )
)

(define rotate
  (lambda(lst)
    (append (cdr lst)(cons (car lst)(list)))
  )
)

(define duplicate-items
   (lambda(lst dup-count)
      (if (empty? lst)
        lst
        (append (duplicate-helper (car lst)(car dup-count)) (duplicate-items (cdr lst) (rotate dup-count)))
      )
   )
)




(define payment
  (lambda (n coins-lst)
        (if(eq? n 0)
            1
            (if(empty? coins-lst)
              0
              (+ (payment(- n (car coins-lst))(cdr coins-lst))
              (payment n (remove-all (car coins-lst) coins-lst))
              )
          )
        )
  )
)

(define remove-all
  (lambda (x lst)
    (if (empty? lst)
        lst
        (if (eq? (car lst) x)
            (remove-all x (cdr lst))
            (cons (car lst) (remove-all x (cdr lst)))))))

                               
(define compose-n
  (lambda(f n)   
    (if (eq? n 1)
        (lambda (x)
          (f x)
        )
        (lambda (x)
         (f ((compose-n f (- n 1)) x)) 
      )
    )
  )
)